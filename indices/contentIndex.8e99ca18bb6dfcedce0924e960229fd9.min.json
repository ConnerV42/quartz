{"/":{"title":"cvwiki","content":"\nWelcome to cvwiki, my personal web of knowledge. Feel free to bookmark this web page. I update this site often, and continuously collect knowledge and refine ideas here.\n\nYou can perform a full text search by typing `ctrl + k`.\n\nEach new post (or update to an existing post) can be found in [here](/notes).\n\n- [Software Engineering Wiki](/notes/software-engineering.md)\n- [Recipes](/notes/recipes.md)","lastmodified":"2022-11-05T07:29:40.624565285Z","tags":null},"/notes/Docker":{"title":"Docker","content":"\n## Writing a Dockerfile for Spring\n\n- Use docker multi stage build\n```Dockerfile\nFROM maven:3.6.3-openjdk-11-slim as builder\n\nWORKDIR /app\nCOPY pom.xml .\n# Use this optimization to cache the local dependencies. Works as long as the POM doesn't change\nRUN mvn dependency:go-offline\n\nCOPY src/ /app/src/\nRUN mvn package\n\n# Use AdoptOpenJDK for base image.\nFROM adoptopenjdk/openjdk11:jre-11.0.8_10-alpine\n\n# Copy the jar to the production image from the builder stage.\nCOPY --from=builder /app/target/*.jar /app.jar\n\n# Run the web service on container startup.\nCMD [\"java\", \"-jar\", \"/app.jar\"]\n```\n\n## Useful Commands\n- `docker container ls` lists all running containers\n- `docker container ls -a` lists all containers\n- `docker container prune`  add -f or --force to not prompt for confirmation\n- `docker images` lists all images that are present locally\n- `docker image rm IMAGE_ID` to remove an image\n- `docker image prune`  add -f or --force to not prompt for confirmation\n- `docker system df` shows disk usage and size of 'Build Cache'\n\nYou can run an interactive shell container using that image and explore whatever content that image has. For instance:\n```\ndocker run -it image_name sh\n```\n\nOr the following for images with an `entrypoint`:\n```\ndocker run -it --entrypoint sh image_name\n```\n\nOr, if you want to see how the image was build, meaning the steps in its `Dockerfile`, you can:\n```\ndocker image history --no-trunc image_name \u003e image_history\n```\n\nThe steps will be logged into the `image_history` file.\n- Load Docker Image from tar file\n```\ndocker load -i application-image.tar \n```\n\n- Inspect image\n```\ndocker inspect application\n```","lastmodified":"2022-11-05T07:29:40.624565285Z","tags":null},"/notes/air-fried-frozen-broccoli":{"title":"Air Fried Broccoli","content":"\n## Ingredients\n-   24 oz frozen broccoli florets\n-   1/2 teaspoon salt\n-   1/2 teaspoon pepper\n-   1 teaspoon garlic powder\n-   3/4 teaspoon onion powder\n-   olive oil spray\n\n## Cooking Equipment\n- Air Fryer\n\n## Instructions\n1. Make sure the air fryer is clean.\n2. Spray the air fryer basket with olive oil spray, then place the frozen broccoli florets in the basket. For best results, do not allow the broccoli to thaw at all prior to baking, place it straight from the freezer into the air fryer.\n3. Spray the broccoli florets with olive oil spray, then sprinkle on the salt, pepper, garlic powder, and onion powder. Give the basket a shake to mix the spices around.\n4. Air fry at 400 degrees for 10 minutes. Stir and shake the basket, then air fry an additional 5-15 minutes, until desired level of crispiness.\n5. Top with Parmesan cheese and serve.","lastmodified":"2022-11-05T07:29:40.624565285Z","tags":null},"/notes/awesome-git-repositories":{"title":"Awesome GitHub Projects","content":"\n- [GitHub Greatest hits](https://archiveprogram.github.com/assets/img/archive-repos.txt) list of archived repositories on GitHub:\n- [Nintendo Switch Emulator](https://github.com/yuzu-emu/yuzu)","lastmodified":"2022-11-05T07:29:40.624565285Z","tags":null},"/notes/bash":{"title":"Bash","content":"\n## Helpful Links\n- [Bash Hacker's Wiki](https://wiki.bash-hackers.org/)\n- [Wooledge's Wiki](https://mywiki.wooledge.org/BashFAQ)\n- [Shell Script Best Practices, from a decade of scripting things](https://sharats.me/posts/shell-script-best-practices/)\n\n## Infinite Loop\nBecause sometimes it's just necessary to have an infinite loop.\n\n```bash\n#!/bin/bash\n\nwhile true\ndo\n\techo \"Running some command\"\n\tsleep 30 # sleep for 30 seconds\ndone\n```\n\n## Auto-complete Shell script name via Terminal\n1. Write your script. This is a random example script that just performs some basic input validation, and then runs a jar.\n```bash\n#!/bin/sh\n\narg1=$1\narg2=$2\n\n## Directory where jar file is located    \ndir=/directory-path/to/jar-file/\n\n## Jar file name\njar_name=app.jar\n\n## Permform some validation on input arguments, one example below\nif [ -z \"$1\" ] || [ -z \"$2\" ]; then\n        echo \"Missing arguments, exiting..\"\n        echo \"Usage : $0 arg1 arg2\"\n        exit 1\nfi\n\njava -jar $dir/$jar_name arg1 arg2\n```\n2. Copy your Bash script to the `/usr/local/bin` directory.\n```\ncp run.sh /usr/local/bin\n```\n3. Give execute permission to the script.\n```\nchmod u+x /usr/local/bin/test.sh\n```\n4. Now you can type just the word `run` or `run.sh` on command line, followed by any arguments necessary to run your script. The shell will auto-complete the script name and allow execution by pressing the enter key.\n\n## Pipefail\n[Set -euxo pipefail](http://blog.kablamo.org/2015/11/08/bash-tricks-eux/)\n\n## Bash script\nBash script for quickly generating AWS session credentials for a role in a spring boot application.properties file for local development.\n\n```bash\n#!/bin/bash  \n  \n# Create an application-OVERRIDES.properties file in \n# environment/src/main/resources, then this script will\n# load credentials for AWS SDK usage in your environment.\n#\n# Usage: run `./setAWSProperties.sh` from scripts or root app directory  \n  \nAMAZON_ACCESS_KEY_PROPERTY_NAME=\"amazon.access.key=\"  \nAMAZON_SECRET_KEY_PROPERTY_NAME=\"amazon.access.secretkey=\"  \nAMAZON_SESSION_TOKEN_PROPERTY_NAME=\"amazon.access.sessiontoken=\"  \n  \nwrite_aws_credentials () {  \n # get vault creds as json  \n JSON=$(aws-vault exec \u003cYOUR_AWS_ROLE_NAME\u003e --json)  \n ACCESS_KEY_ID=$(echo \"$JSON\" | jq -r .AccessKeyId)  \n SECRET_ACCESS_KEY=$(echo \"$JSON\" | jq -r .SecretAccessKey)  \n SESSION_TOKEN=$(echo \"$JSON\" | jq -r .SessionToken)  \n  \n # write a newline so the credentials are not appended onto an existing property  \n echo \"\" \u003e\u003e \"$1\"  \n  \n # find and delete existing aws session credentials  \n sed -i -e \"/$AMAZON_ACCESS_KEY_PROPERTY_NAME/d\" \"$1\"  \n sed -i -e \"/$AMAZON_SECRET_KEY_PROPERTY_NAME/d\" \"$1\"  \n sed -i -e \"/$AMAZON_SESSION_TOKEN_PROPERTY_NAME/d\" \"$1\"  \n  \n # set new aws sessions credentials  \n echo \"$AMAZON_ACCESS_KEY_PROPERTY_NAME;$ACCESS_KEY_ID\" \u003e\u003e \"$1\"  \n echo \"$AMAZON_SECRET_KEY_PROPERTY_NAME$SECRET_ACCESS_KEY\" \u003e\u003e \"$1\"  \n echo \"$AMAZON_SESSION_TOKEN_PROPERTY_NAME$SESSION_TOKEN\" \u003e\u003e \"$1\"  \n echo \"wrote aws session credentials to application.OVERRIDES.properties\"\n}  \n  \nOVERRIDES_FILE_DIR=\"environment/src/main/resources/application-OVERRIDES.properties\"\n  \nif [ -e \"$OVERRIDES_FILE_DIR\" ]; then  \n write_aws_credentials $OVERRIDES_FILE_DIR  \nelif [ -e \"../$OVERRIDES_FILE_DIR\" ]; then  \n write_aws_credentials \"../$OVERRIDES_FILE_DIR\"  \nelse  \n echo \"application-OVERRIDES.properties does not exist. Create it and re-run the script.\"  \nfi\n```\n\n## Print scripting language\n```\necho $0\n```","lastmodified":"2022-11-05T07:29:40.624565285Z","tags":null},"/notes/blueberry-oatmeal":{"title":"Blueberry Oatmeal","content":"\n## Steps \n- Make oatmeal on stove or in microwave.\n- Throw Trader Joe's organic frozen blueberries in halfway through.\n- Mix in desired amount of chia seeds and serve.","lastmodified":"2022-11-05T07:29:40.624565285Z","tags":null},"/notes/bone-broth-rice":{"title":"Bone Broth Rice","content":"\n## Ingredients\n- Use 1:2 ratio cups of rice to cups of bone broth.\n - For example, 1 cup of rice and 2 cups of bone broth.\n- 1-2 tbs of organic grass fed butter.\n\n## Cooking Instructions\n- Bring 2 cup of organic bone broth and 1 tbs of butter to a light boil\n- Add 1 cup of Spanish rice, stir for one minute, then reduce to a covered simmer for 15-17 minutes.","lastmodified":"2022-11-05T07:29:40.624565285Z","tags":null},"/notes/creamy-tortellini-spinach-chicken-soup":{"title":"Creamy Tortellini Spinach Chicken Soup","content":"\n## Cooking equipment\n- Instant Pot\n- 1 tbsp measure\n- 1/2 tsp measure\n- 1 cup measure\n- 1/2 cup measure\n## Ingredients\n- 1 tbsp of Olive oil\n- 1 yellow onion, diced\n- 3 tsp garlic minced\n- 4 cups chicken broth\n- 1 to 1 1/2 lbs boneless, skinless chicken thighs\n- 1 Tbsp dried basil\n- 2 Tbsp tomato paste\n- 2 (14.5 oz) cans petite diced tomatoes\n- 1 tsp salt\n- 1/2 tsp pepper\n- 1 cup heavy cream or 1 cup half and half\n- 4 cups frozen cheese tortellini (or you can use fresh)\n- 3 cups packed spinach (you can definitely add more than this if you want)\n- 1/2 cup Parmesan cheese\n## Steps\n1. Turn the Instant Pot on to the saute function, on the highest setting. Heat the oil in the bottom of the pot. Add in the diced onion and stir for a couple of minutes. Add in the garlic and stir until the onions are translucent, another couple of minutes.\n2. Add in the basil, tomato paste, chicken broth, tomatoes, chicken, salt and pepper. Give a quick stir. Cover the Instant Pot and secure the lid. Make sure valve is set to “sealing.” Press the manual pressure cook button and set the timer to 15 minutes (high pressure). Once the timer beeps let out the pressure by gently moving the valve to “venting.”\n3. Spoon the chicken out and place it on a cutting board. Cut the chicken into bite size pieces and then add it back into the pot. Stir in the tortellini, spinach, Parmesan cheese, and half and half. Turn the IP to saute to heat up the tortellini quickly. Once the tortellini is warmed through ladle the soup into bowls and serve.","lastmodified":"2022-11-05T07:29:40.624565285Z","tags":null},"/notes/curl":{"title":"Curl","content":"\n## curl resources\n- [Curl Man Page](https://curl.se/docs/manpage.html)\n- [Curl Command Cheat Sheet](https://reqbin.com/req/c-kdnocjul/curl-commands)\n\n## useful curl commands\n- Pipe curl command output to `json_pp` to pretty print json response\n```\n$CURL_COMMAND | json_pp\n```\n- Curl Timeouts\n  - `curl --max-time \u003cseconds\u003e` or `curl -m \u003cseconds\u003e`\n- There is no difference between `-v`, `-vv`, and `-vvv` in curl\n  - [Explanation via Stack Overflow](https://stackoverflow.com/questions/24402473/what-is-meaning-of-vvv-option-in-curl-request)\n```\ncurl -vvv -sSL -o /dev/null 'https://google.com/'\n```","lastmodified":"2022-11-05T07:29:40.624565285Z","tags":null},"/notes/gcp-wiki":{"title":"GCP Wiki","content":"\n- Firestore vs. Firebase\n- [Google Cloud Run](/notes/google-cloud-run.md)","lastmodified":"2022-11-05T07:29:40.624565285Z","tags":null},"/notes/git":{"title":"Useful Git Commands","content":"\n## Stash Commands\n- Stash tracked files with a stash message\n```shell\ngit stash save \"stash message\"\n```\n--- \n- Stash tracked and untracked files (`-u` is shorthand for `--include-untracked`) with a stash message\n```bash\ngit stash save -u \"stash message\"\n```\n--- \n- View all stashes\n```bash\ngit stash list\n```\n--- \n- Peek at a stash\n```bash\ngit stash show -p stash@{0}\n```\n--- \n- Apply stash by id (Doesn't delete from stash)\n```bash\ngit stash apply stash@{0}\n```\n---\n- Unstash a single, specific file from a stash\n```bash\ngit diff stash@{0}^1 stash@{0} -- \u003cfilename\u003e\n```\n---\n- The `-p` and `-u`  flag step-by-step walks you through each changed/new file in your repo and asks \"Do you want to stash this?\"\n```\ngit stash save -p -u\n```\n---\n## Cleaning / Deletion\n- Remove a file from source control without deleting it:\n```\ngit rm --cached mylogfile.log\n```\n- Remove a directory from source control without deleting it:\n```\ngit rm --cached mylogfile.log\n```\n- In case you have **_not_** pushed the commit publicly yet, and want to undo it, keeping the changes in your working directory:\n```\ngit reset HEAD~1 --soft   \n```\n---\n- Dry (`-n`) run for git clean for recursive directory (`-d`) deletion of untracked files:\n```shell\ngit clean -n -d\n```\n---\n- Delete all untracked files from the repository (ignores files in .gitignore):\n```shell\ngit clean -f\n```\n---\n- Discard uncommitted, local changes\n```shell\ngit reset --hard\n```\n---\n- To delete a local branch\n```shell\ngit branch -d \u003clocal-branch\u003e\n```\n\n### I committed the deletion and then I did more commits\nIf you deleted a file, committed, then continued work and did more commits, only to find that deleting the file was a mistake, Git still has you covered! To find the right commit, first check the history for the deleted file:\n```\n$ git log -- \u003cfilename\u003e\n```\n\nYou can either work with the last commit that still had the file, or the commit that deleted the file. In the first case, just checkout the file from that commit:\n```\n$ git checkout \u003ccommit hash\u003e -- \u003cfilename\u003e\n```\n\nIn the second case, checkout the file from one commit _before_ that:\n```\n$ git checkout \u003cdeletion commit hash\u003e~1 -- \u003cfilename\u003e\n```\n---\n## Merging\n- Merge main into feature \n```\ngit checkout main\ngit pull\ngit checkout feature\ngit merge main\ngit push\n```\n---\n## Rebasing\n- Does an interactive rebase, starting at the most recent commit, and working to the Nth commit from HEAD to produce a squashed commit. The squashed commit replaces each commit starting with HEAD, and ending at N, inclusive.\n```shell\ngit rebase -i HEAD~N\n```\n---\n## Misc. Commands\n- Revert singular files back to their state in a previous commit hash\n```shell\ngit checkout $COMMIT_SHA -- file1/to/restore file2/to/restore\n```\n- To view local and remote branches\n```shell\ngit branch -a\n```\n--- \n- To view local and remote branches, and the last commit to each \n```shell\ngit branch -a -v\n```\n---\n\n- Show staged changes\n```shell\ngit diff --cached\n```\nor\n```shell\ngit diff HEAD\n```\n---\n- See number of commits by each author for a branch and their email\n```bash\ngit shortlog -sne \n```\n--- \n- See number of commits since a certain date:\n```bash\n- git shortlog -s -n --since \"JAN 1 2022\"\n```\n--- \n\n## Resources\n- [Restoring Deleted Files](https://www.git-tower.com/learn/git/faq/restoring-deleted-files)\n- git cheat sheet:\n- https://gitexplorer.com/","lastmodified":"2022-11-05T07:29:40.624565285Z","tags":null},"/notes/gitlab-ci-cd":{"title":"Gitlab CI/CD","content":"\n\n## Using `gitlab-runner` to test ci locally\n- If on macOS, install gitlab-runner with the below command\n```\nbrew install gitlab-runner\n```\n- To start service, run the below command\n```\nbrew services start gitlab-runner\n```\n- To restart the service, run the below command\n```\nbrew services restart gitlab-runner\n```\n- Official Gitlab Runner Docs: [Install GitLab Runner](https://docs.gitlab.com/runner/install/)\n- Create a command\n\t- The following `.gitlab-ci.yml` file defines a task named `build`:\n```yaml\nbuild:\n  script:\n    - echo \"Hello World\"\n```\n\n- Run the command locally [(_limitations apply!_)](https://docs.gitlab.com/runner/commands/index.html#limitations-of-gitlab-runner-exec)\n\n```yaml\ngitlab-runner exec shell build\n```\n\n### Consuming an npm package from private GitLab Package Registry\n\n1. Set registry and ensure authentication is configured via project access token. Add the following to your .npmrc at the root directory of your project that will be consuming from the private registry.\n```bash\n@my_scope:registry=https://gitlab.com/api/v4/projects/$PROJECT_ID/packages/npm/\n//gitlab.com/api/v4/packages/npm/:_authToken=$PROJECT_ACCESS_TOKEN\n//gitlab.com/api/v4/projects/$PROJECT_ID/packages/npm/:_authToken=$PROJECT_ACCESS_TOKEN\n```\n\n2. To install the package, run \n```bash\nnpm install @my-scope/my-package\n```\n\n## Links\n- [Npalm Terraform Gitlab Runner](https://github.com/npalm/terraform-aws-gitlab-runner/releases)","lastmodified":"2022-11-05T07:29:40.624565285Z","tags":null},"/notes/google-cloud-run":{"title":"Google Cloud Run","content":"\nnothing yet...","lastmodified":"2022-11-05T07:29:40.624565285Z","tags":null},"/notes/hot-garlic-honey-glazed-salmon":{"title":"Hot Garlic Honey Glazed Salmon","content":"\n## Ingredients\n- 12 oz. (340 g) Salmon, cut into 2-3 fillet strips\n- Salt\n- Black Pepper\n- 1 pinch of Cayenne Pepper\n- 2 tablespoons of Honey\n- 1 tablespoon warm water\n- 1 tablespoon of Olive Oil\n- 1 tablespoon of Minced Garlic\n- 1 tablespoon of Parsley\n- 1 1/2 teaspoons of Apple Cider Vinegar or Lemon Juice\n- 1/2 lemon, sliced into wedges\n## Instructions\n1. Season the surface of the salmon with salt, black pepper and cayenne pepper. Set aside.\n2. Mix the honey, water, apple cider vinegar or lemon juice and a pinch of salt together. Stir to combine well.\n3. Heat up an oven-safe skillet (cast-iron skillet preferred) on high heat. Add the olive oil. Pan-fry the salmon, skin side down first, for about 1 minute. Turn the salmon over and cook for 1 minute. Turn it over again so the skin side is at the bottom.\n4. Add the garlic into the pan, saute until slightly browned. Add the honey mixture and lemon wedges into the skillet, reduce the sauce until it's sticky.\n5. Finish it off by broiling the salmon in the oven for 1 minute or until the surface becomes slightly charred (optional step).\n6. Top the salmon with parsley and serve immediately. Internal temperature should reach 125 to 130 degrees Fahrenheit.\n\n## Oven Version\nI just use oil. I coat the entire fillet (or steak) in veggie oil or olive oil, and put it skin-side-down in an old pan into a preheated 450+ degree oven. You'll have to try this like 10 times in order to learn your exact oven temperature and salmon cooking time. When I cook a 140 gram (1/3 lb) fillet for myself that's about 3 cm (1 1/4 inch) thick, I cook it about 9 minutes 50 seconds. (Don't open the oven while it's cooking.) Eat the salmon the instant it doesn't burn your mouth. It should melt in your mouth.\n\nI've also seen people sprinkle sugar on top of the oil before cooking, and that comes out nicely. When peaches or apricots or plums are in season, sometimes I chop one up and add it on top of the salmon _after_ the salmon is cooked. Or, as you say, salmon goes well with soy sauce, sesame oil, etc. But properly cooked salmon is delicious all by itself with only veggie oil, so everything else is optional.","lastmodified":"2022-11-05T07:29:40.624565285Z","tags":null},"/notes/ip-address":{"title":"IP Address","content":"\nWhen dealing with IP issues, this [tool](https://tehnoblog.org/ip-tools/ip-address-in-cidr-range/) for verifying IP Address in CIDR Range is useful.","lastmodified":"2022-11-05T07:29:40.632565376Z","tags":null},"/notes/jo":{"title":"Sed","content":"\n## Shell command to create JSON\n[Create JSON with jo](https://jpmens.net/2016/03/05/a-shell-command-to-create-json-jo/)","lastmodified":"2022-11-05T07:29:40.632565376Z","tags":null},"/notes/jq":{"title":"jq - json parsing cli tool","content":"\n##### Modifying a key-value in a JSON file using jq in-place\n\n```bash\ncontents=\"$(jq '.name = \"newValue\"' package.json)\" \u0026\u0026 \\\necho \"${contents}\" \u003e package.json\n```\n\n##### Bash Script that utilizes jq to alter package.json to prep it for GitLab Registry NPM Package Upload.\n```bash\n#!/bin/bash  \n  \n# Update package.json \"name\" property, which is required  \n# to include the GitLab Registry scope \"@scope\"  \n# and add a \"publicConfig\" object property that contains  \n# a reference to the scope registry that the sdk will be  \n# uploaded to.  \n  \nPACKAGE_DIR=\"app\"  \nPACKAGE_JSON_FILE_NAME=\"package.json\"  \nGITLAB_REGISTRY_LOCATION=\"https://gitlab.com/api/v4/projects/$PROJECT_ID/packages/npm/\"  \n  \ncd ../$PACKAGE_DIR  \n  \n# Prepend GitLab Registry scope to .name property in package.json  \nCONTENTS=\"$(jq '.name = \"@scope/\" + .name' $PACKAGE_JSON_FILE_NAME)\" \u0026\u0026 \\  \necho \"${CONTENTS}\" \u003e temp1.json  \n  \nPUBLISH_CONFIG=$(echo '{ \"publishConfig\": { \"@scope:registry\": \"https://gitlab.com/api/v4/projects/$PROJECT_ID/packages/npm/\"} }' | jq .)  \necho \"${PUBLISH_CONFIG}\" \u003e temp2.json  \n  \n# Performs a jq slurp merge, merging the altered contents of the package.json  \n# with the publishConfig object  \nOUTPUT=\"$(jq -s 'add' temp1.json temp2.json)\"  \n  \n# Output new package.json for GitLab Registry upload  \necho \"${OUTPUT}\" \u003e package.json  \n  \n# clean up temporary files used in jq slurp merge  \nrm temp1.json temp2.json\n```","lastmodified":"2022-11-05T07:29:40.632565376Z","tags":null},"/notes/markdown":{"title":"Markdown Wiki","content":"\n## Embedding Repl's\n\u003ciframe frameborder=\"0\" width=\"100%\" height=\"500px\" src=\"https://replit.com/@replit/Java?embed=true\"\u003e\u003c/iframe\u003e\n\n## Line Breaks\nAdding a line break tag: `\u003cbr\u003e\u003c/br\u003e  (+2 spaces + newline)` \u003cbr\u003e\u003c/br\u003e  \nNew Paragraph\n## Block Quotes\n\u003e AWS Docs here say this\n\u003e \n\u003e they say this too.\n## Highlight Text\nUse two equal signs to ==highlight text==.\n\n## Footnotes\nHere's a simple footnote,[^1] and here's a longer one.[^bignote]\n\n[^1]: meaningful!\n\n[^bignote]: Here's one with multiple paragraphs and code.\n\n    Indent paragraphs to include them in the footnote.\n\n    `{ my code }`\n\n    Add as many paragraphs as you like.\n\n## Code Block Example\n```html\n\u003chtml\u003e\n\t\u003chead\u003e\n\t\t\u003ctitle\u003eTest\u003c/title\u003e\n\t\u003c/head\u003e\n\u003c/html\u003e\n```\n\n## Example of Linking an Image or Gif\n![AltText|200x125](/notes/gifs/hiawheroes.gif)","lastmodified":"2022-11-05T07:29:40.632565376Z","tags":null},"/notes/maven":{"title":"Maven Wiki","content":"## Maven Resources\n- [Apache Maven Docs: Maven CLI Options Reference](https://maven.apache.org/ref/3.8.1/maven-embedder/cli.html)\n- [Apache Maven Docs: Maven CI Friendly Versions](https://maven.apache.org/maven-ci-friendly.html)\n- [Apache Maven Docs: Maven Plugins](https://maven.apache.org/plugins/index.html)\n\t- [Difference b/t Common Maven Plugins](https://stackoverflow.com/questions/38548271/difference-between-maven-plugins-assembly-plugins-jar-plugins-shaded-plugi)\n\n## Maven Commands\n- To view the versions of every dependency used throughout your maven project:\n```\nmvn dependency:tree\n```\n\t\n## Maven Build Lifecycle\n- [Quick Summary of Maven Build Lifecycle from the Apache Website](https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html#maven-phases)\n### Clean\n- `clean` is it's own build lifecycle phase (which can be thought of as an action or task) in Maven. `mvn clean install` tells Maven to do the `clean` phase in each module before running the `install` phase for each module.\n\n- What this does is clear any compiled files you have, making sure that you're really compiling each module from scratch.\n\n- Once we have the database populated in each environment, we should run a build and test stage.\n### Verify\n`mvn verify` performs any integration tests that maven finds in the project.\n### Install \n- `mvn install` – install the package into the local repository, for use as a dependency in other projects locally.\n- `mvn install` implicitly runs `mvn verify` and then copies the resulting artifact into your local maven repository which you usually can find under `C:\\Users\\username\\.m2\\repository` if you are using windows.\n### Package\n- `mvn package` – take the compiled code and package it in its distributable format, such as a JAR, WAR, or Docker image.\n- Both of `mvn install` and `mvn package` will compile your code, clean the `/target` folder, and place a new packaged JAR or WAR into that /target folder. The main difference: `mvn install` will also install the package into your local maven repository, for use as a dependency in other projects locally.\n## Managing Parent POM and Child POMs\nTo match a parent POM, Maven uses two rules:\n1. There is a pom file in project’s root directory or in given relative path.\n2. Reference from child POM file contains the same coordinates as stated in the parent POM file.\n\nMaven parent pom can contain almost everything and those can be inherited into child pom files e.g\n\n- Common data – Developers’ names, SCM address, distribution management etc.\n- Constants – Such as version numbers\n- Common dependencies – Common to all child. It has same effect as writing them several times in individual pom files.\n- Properties – For example plugins, declarations, executions and IDs.\n- Configurations\n- Resources\n### Example Parent POM\n```xml\n\u003cproject xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsdr\"\u003e\n \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\n\t\t\t\t\t \n \u003cgroupId\u003ecom.howtodoinjava.demo\u003c/groupId\u003e\n \u003cartifactId\u003eMavenExamples\u003c/artifactId\u003e\n \u003cversion\u003e0.0.1-SNAPSHOT\u003c/version\u003e\n \u003cpackaging\u003epom\u003c/packaging\u003e\n\t\t\t\t\t \n \u003cname\u003eMavenExamples Parent\u003c/name\u003e\n \u003curl\u003ehttp://maven.apache.org/\u003c/url\u003e\n\t\t\t\t\t \n \u003cproperties\u003e\n\t \u003cproject.build.sourceEncoding\u003eUTF-8\u003c/project.build.sourceEncoding\u003e\n\t \u003cjunit.version\u003e3.8.1\u003c/junit.version\u003e\n\t \u003cspring.version\u003e4.3.5.RELEASE\u003c/spring.version\u003e\n \u003c/properties\u003e\n\t\t\t\t\t \n \u003cdependencies\u003e\n\t\t\t\t\t \n \u003cdependency\u003e\n\t \u003cgroupId\u003ejunit\u003c/groupId\u003e\n\t \u003cartifactId\u003ejunit\u003c/artifactId\u003e\n\t \u003cversion\u003e${junit.version}\u003c/version\u003e\n\t \u003cscope\u003etest\u003c/scope\u003e\n \u003c/dependency\u003e\n\t\t\t\t\t \n \u003cdependency\u003e\n\t \u003cgroupId\u003eorg.springframework\u003c/groupId\u003e\n\t \u003cartifactId\u003espring-core\u003c/artifactId\u003e\n\t \u003cversion\u003e${spring.version}\u003c/version\u003e\n \u003c/dependency\u003e\n\t\t\t\t\t \n \u003c/dependencies\u003e\n\u003c/project\u003e\n```\n### Example Child POM\n```xml\n\u003cproject xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsdr\"\u003e\n \n\u003c!--The identifier of the parent POM--\u003e\n \u003cparent\u003e\n\t \u003cgroupId\u003ecom.howtodoinjava.demo\u003c/groupId\u003e\n\t \u003cartifactId\u003eMavenExamples\u003c/artifactId\u003e\n\t \u003cversion\u003e0.0.1-SNAPSHOT\u003c/version\u003e\n\u003c/parent\u003e\n\t\n \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\n \u003cartifactId\u003eMavenExamples\u003c/artifactId\u003e\n \u003cname\u003eMavenExamples Child POM\u003c/name\u003e\n \u003cpackaging\u003ejar\u003c/packaging\u003e\n\t\t\t\t\t \n \u003cdependencies\u003e\n\t \u003cdependency\u003e\n\t\t \u003cgroupId\u003eorg.springframework\u003c/groupId\u003e\n\t\t \u003cartifactId\u003espring-security\u003c/artifactId\u003e\n\t\t \u003cversion\u003e${spring.version}\u003c/version\u003e\n\t \u003c/dependency\u003e\n \u003c/dependencies\u003e\n\u003c/project\u003e\n```\n## Maven Snapshots\nA snapshot version in Maven is one that has not been released.\n\nThe idea is that **before** a `1.0` release (or any other release) is done, there exists a `1.0-SNAPSHOT`. That version is what _might become_ `1.0`. It's basically \"`1.0` under development\".\n\nThe difference between a \"real\" version and a snapshot version is that snapshots might get updates. That means that downloading `1.0-SNAPSHOT` today might give a different file than downloading it yesterday or tomorrow.\n\nUsually, snapshot dependencies should **only** exist during development and no released version (i.e. no non-snapshot) should have a dependency on a snapshot version.\n\nThe snapshot is _not_ necessarily more stable: it is just the latest build. The snapshot _precedes_ the actual release, it does not come after it.","lastmodified":"2022-11-05T07:29:40.632565376Z","tags":null},"/notes/node":{"title":"Node","content":"\n### Writing an array of JSON to a file from an API in Node\n- Requires axios\n```javascript\nconst axios = require('axios');\nconst { writeFile } = require('fs');\nconst API_BASE_URL = 'https://my-api.com';\nconst PROFILE_ENDPOINT = `${API_BASE_URL}/v1/profile`;\n\nlet failedUsers = 0;\n\nconst fileOptions = {\n    flag: 'a'\n};\n\nconst writeUser = (response) =\u003e {\n    const { data: { profile: { email, password } } } = response;\n\n    const obj = {\n        email,\n        password\n    };\n\n    writeFile(outputFileName, JSON.stringify(obj, null, 2) + ',' + '\\n', fileOptions, err =\u003e err ? console.error(err) : '');\n};\n\nconst logError = (err) =\u003e {\n    if (err) {\n        console.error(err);\n        failedUsers++;\n    }\n}\n\nconst seedUsers = async () =\u003e {\n    console.log(`Creating ${desiredProfileCount} profiles and writing login credentials to ${outputFileName}`);\n    const promises = [];\n\n    const requestBody = {\n        serviceData: [\n            \"CREDIT_CARD\"\n        ]\n    };\n\n    for (let i = 0; i \u003c desiredProfileCount; i++) {\n        const promise = axios.post(PROFILE_ENDPOINT, requestBody)\n            .then(writeUser)\n            .catch(logError);\n\n        promises.push(promise);\n    }\n\n    await Promise.all(promises);\n\n    console.log(`\\nUsers have been added. ${failedUsers} request(s) failed.`);\n}\n\nconst validateInput = (args) =\u003e {\n    let result = true;\n\n    if (args[0] === undefined || isNaN(args[0])) {\n        console.log(\"ERROR: 1st argument is not a number or is missing, please pass desired number of profiles\");\n        result = false;\n    }\n\n    if (args[1] === undefined) {\n        console.log(\"ERROR: 2nd argument missing, please pass an output file name.\");\n        result = false;\n    }\n\n    if (!result) {\n        console.log(\"Example Usage:   \\\"node asyncCreateUsers.js 10 output.json\\\"\");\n        console.log(\"The above example writes 10 profiles to output.json\\n\");\n    }\n\n    return result;\n};\n\nconst args = process.argv.slice(2);\nconst validInput = validateInput(args);\n\nconst desiredProfileCount = args[0];\nconst outputFileName = args[1];\n\nif (validInput) {\n    seedUsers();\n}\n\n```\n\n### `n` – Interactively Manage Your NodeJS Versions\n[**n**](https://github.com/tj/n), is an extremely simple Node version manager that can be installed via npm.\n\nSay you want Node.js v0.10.x to build [Atom](https://github.com/atom/atom).\n\n```bash\nnpm install -g n   # Install n globally\nn 0.10.33          # Install and use v0.10.33\n```\n\n```bash\nUsage:\nn                            # Output versions installed\nn latest                     # Install or activate the latest node release\nn stable                     # Install or activate the latest stable node release\nn \u003cversion\u003e                  # Install node \u003cversion\u003e\nn use \u003cversion\u003e [args ...]   # Execute node \u003cversion\u003e with [args ...]\nn bin \u003cversion\u003e              # Output bin path for \u003cversion\u003e\nn rm \u003cversion ...\u003e           # Remove the given version(s)\nn --latest                   # Output the latest node version available\nn --stable                   # Output the latest stable node version available\nn ls                         # Output the versions of node available\n```\n","lastmodified":"2022-11-05T07:29:40.632565376Z","tags":null},"/notes/obsidian":{"title":"Obsidian","content":"\n## Plugins\n- Vim\n- Kanban\n\n## Essentials\n\n### Basics\n\n_Open Graph View_ — `Cmd-g`\n_Make new note_ — `Cmd-n`\n_Create note in new pane_ — `Cmd-shift-n`  \n_Open the link you’re hovering over in a new pane (while in edit mode)_ — `Cmd-click`  \n_Toggle edit/preview mode_ — `Cmd-e`  \n_Open quick switcher_ — `Cmd-o`  \n_Close active pane_ — `Cmd-w`\n_Open command palette_ — `Cmd-p`  \n_Search and replace in current file_ — `Cmd-f`  \n_Search in all files_ — `Cmd-shift-f`\n_Open settings_ — `Cmd-,`  \n\n### Formatting Basics\n\n_Undo, cut, copy, paste, bold, italicize_ — `Cmd-z,x,c,v,b,i`","lastmodified":"2022-11-05T07:29:40.632565376Z","tags":null},"/notes/openapi":{"title":"OpenAPI","content":"\n### Why use OpenAPI?\nAs a tool, OpenAPI allows you to generate client SDKs for your API across dozens of supported languages. Building SDKs are an integral part of the developer experience because they: \n- Save huge amounts of development time\n- Dramatically reduce \"time to first API call\"\n- Embed optimization \u0026 best practices into API usage\n\n### Generate Node SDK with OpenAPI and Publish to GitLab Registry\nThis documentation was developed using this GitLab [documentation](https://docs.gitlab.com/ee/user/packages/npm_registry/#use-the-gitlab-endpoint-for-npm-packages)\n\n1. Create a Temporary Project Access Token with full permissions for testing the SDK upload to Gitlab Registry locally\n2. Generate the SDK\n```bash\nmkdir javascript-sdk\ncd javascript-sdk\nexport JS_POST_PROCESS_FILE=\"/usr/local/bin/js-beautify -r -f\"\nopenapi-generator generate -i $SWAGGER_URL -g javascript -o .\n```\n3. Install packages and build\n```bash\nnpm install\n```\n4. Ensure secure communication for private registries\n```bash\nnpm config set always-auth true\n```\n5. Deploying to GitLab Registry\n\t1. For local GitLab Registry uploads, we need a personal access token, with full registry write permissions.\n```bash\nnpm config set @your_scope/npm_package_name:registry https://gitlab.com/api/v4/projects/$PROJECT_ID/packages/npm/\n```\n```bash\nnpm config set -- '//gitlab.com/api/v4/projects/$PROJECT_ID/packages/npm/:_authToken' $AUTH_TOKEN\n```\n6. Publish to GitLab Registry\n```bash\nnpm publish\n```\n\n### Publishing an npm package to Gitlab locally\n1. Add the following to your generated SDK's package.json file\n```json\n{  \n  \"name\": \"@scope/package-name\"\n}\t\n```\n```json\n \"publishConfig\": {  \n    \"@scope:registry\": \"$GITLAB_API_V4/projects/$PROJECT_ID/packages/npm/\"\n } \n```\n2. Add the following to your `.npmrc` file\n```bash\n//gitlab.com/api/v4/projects/$PROJECT_ID/packages/npm/:_authToken=$PERSONAL_ACCESS_TOKEN\n//gitlab.com/api/v4/packages/npm/:_authToken=$PERSONAL_ACCESS_TOKEN\n@scope:registry=https://gitlab.com/api/v4/packages/npm/\n```","lastmodified":"2022-11-05T07:29:40.632565376Z","tags":null},"/notes/python":{"title":"Python","content":"\n## Useful Links\n- [Pypi: Find, install and publish Python packages](https://pypi.org/)\n\n## Python Virtual Environment Setup\n\nUsing **venv**, you can easily work with multiple projects with various dependencies on the same machine at the same time.\n\nTo setup virtual environment or venv on Python, first you will need **PIP**. It is the widely used packet manager for Python.\n\n**PIP** comes bundled with Python installation. On a Mac, Homebrew makes it easier to install Python along with **pip**. Simply, 🔥fire up your terminal and enter the following command:\n\n\u003e brew install python@3.9\n\nThe above command installs Python (latest version at the time of the writing) on your Mac. If you already have Python installed on your machine, you can check the version using the following command on you terminal.\n\n\u003e python -V\n\nYou can install the latest version of **pip** using the following. This command will automatically install the latest **pip** version.\n\npython3.9 -m pip install --user --upgrade pip\n\nNow, its time for you install the **venv** or **virtual environment** in Python using the following command.\n\npython3.9 -m pip install --user virtualenv\n\n### Create your virtual environment\n\nTo create a virtual environment, head to your project directory and run the following command.\n\npython3.9 -m venv venv\n\n### Activating your virtual environment\n\nBefore using your virtual environment on your project, you need to activate it using\n\nsource venv/bin/activate\n\nCongratulations 🎉, you’ve successfully installed **venv** and activated it. Install em’ packages now 🛠","lastmodified":"2022-11-05T07:29:40.632565376Z","tags":null},"/notes/recipes":{"title":"Recipes","content":"\n- [Air Fried Frozen Broccoli](/notes/air-fried-frozen-broccoli.md)\n- [Bone Broth Rice](/notes/bone-broth-rice.md)\n- [Blueberry Oatmeal](/notes/blueberry-oatmeal.md)\n- [Creamy Tortellini Spinach Chicken Soup](/notes/creamy-tortellini-spinach-chicken-soup.md)\n- [Hot Garlic Honey Glazed Salmon](/notes/hot-garlic-honey-glazed-salmon.md)\n- [Shrimp And Grits](/notes/shrimp-and-grits.md)\n- [Stuffed Bell peppers](/notes/stuffed-bell-peppers.md)","lastmodified":"2022-11-05T07:29:40.632565376Z","tags":null},"/notes/rudyard-kipling-if":{"title":"If By Rudyard Kipling","content":"\nIf you can keep your head when all about you  \n Are losing theirs and blaming it on you;  \nIf you can trust yourself when all men doubt you,  \n But make allowance for their doubting too;  \nIf you can wait and not be tired by waiting,  \n Or, being lied about, don’t deal in lies,  \nOr, being hated, don’t give way to hating,  \n And yet don’t look too good, nor talk too wise;\n\nIf you can dream—and not make dreams your master;  \n If you can think—and not make thoughts your aim;  \nIf you can meet with triumph and disaster  \n And treat those two impostors just the same;  \nIf you can bear to hear the truth you’ve spoken  \n Twisted by knaves to make a trap for fools,  \nOr watch the things you gave your life to broken,  \n And stoop and build ’em up with wornout tools;\n\nIf you can make one heap of all your winnings  \n And risk it on one turn of pitch-and-toss,  \nAnd lose, and start again at your beginnings  \n And never breathe a word about your loss;  \nIf you can force your heart and nerve and sinew  \n To serve your turn long after they are gone,  \nAnd so hold on when there is nothing in you  \n Except the Will which says to them: “Hold on”;\n\nIf you can talk with crowds and keep your virtue,  \n Or walk with kings—nor lose the common touch;  \nIf neither foes nor loving friends can hurt you;  \n If all men count with you, but none too much;  \nIf you can fill the unforgiving minute  \nWith sixty seconds’ worth of distance run—  \n Yours is the Earth and everything that’s in it,  \nAnd—which is more—you’ll be a Man, my son!","lastmodified":"2022-11-05T07:29:40.632565376Z","tags":null},"/notes/sed":{"title":"Sed","content":"\n```bash\nsed -i '/^all:/ s/$/ anotherthing/' file\n```","lastmodified":"2022-11-05T07:29:40.632565376Z","tags":null},"/notes/shrimp-and-grits":{"title":"Shrimp \u0026 Grits","content":"\n## Ingredients\n\n### Shrimp \u0026 Bacon Ingredients\n- 4 pieces of bacon, cut in 1/4-inch pieces\n- 1 pound of unfrozen shrimp, peeled and deveined, can be cooked or uncooked\n- 1/2 tsp of Cajun seasoning  \n- 1/2 tsp of salt\n- 1/4 tsp of black pepper\n- Pinch of cayenne pepper\n- 1 tbsp of minced garlic\n- 2 tbsp of minced green onion\n- 1 tbsp of minced jalapeno\n- 1 tbsp of chopped parsley\n\n### Sauce Ingredients\n- 1/4 cup of water\n- 2 tbsp of cream\n- 2 tsp of lemon juice\n- A few drops of Worcestershire sauce\n\n### Grits Ingredients\n- 1 cup white grits  \n- 4 cups water\n- 1 teaspoon salt  \n- 2 tablespoons butter  \n- 1/2 cup grated white cheddar\n\n## Cooking Instructions\n1. Season Shrimp\n- Take one pound of thawed, thoroughly dried shrimp and throw in bowl with 1/2 tsp Cajun seasoning, 1/2 tsp of salt, 1/4 teaspoon of black pepper, and pinch of cayenne pepper.\n2. Cook Grits\n\t- Add 4 cups of water, 1 tsp of salt and 2 tbsp of butter to pot\n\t- When it comes to a boil, whisk in grits\n\t- Turn down, bring to simmer, cook uncovered to time on the package.\n\t- When grits are done, turn off the stove, and stir in 1/2 cup of grated white cheddar. Cover to keep warm.\n3. Saute Chopped Bacon \u0026 Cook Shrimp\n\t- If you're using uncooked shrimp, remove the bacon from the pan once it is almost crisp, while keeping the fat in the pan. Aim for about one tablespoon of fat in the pan to use for cooking shrimp. Add the shrimp, while making sure the pan is hot.\n\t- if you're using cooked shrimp, wait until the bacon pieces are already mostly cooked, then throw the cooked shrimp to reheat.\n\t- Immediately throw in 1 tbsp of minced garlic, 2 tbsp of green onion, and 1 tbsp of minced jalapeno. Stir diligently.\n\t- Toss bacon back in with 1/4 cup of water, 2 tbsp of cream, 2 tsp of lemon juice, and Worcestershire sauce.\n\t- As sauce forms, mix in 1 tbsp of parsley.\n\t- Serve in a bowl, sauce over shrimp over grits.\n\t\n[Link to Original Recipe](https://foodwishes.blogspot.com/2010/03/shrimp-and-grits-breakfast-for-dinner.html)","lastmodified":"2022-11-05T07:29:40.632565376Z","tags":null},"/notes/software-engineering":{"title":"Software Engineering Wiki","content":"\n## Languages \u0026 Frameworks\n- [Spring Boot](/notes/spring-boot.md)\n- [Node](/notes/node.md)\n- [Python](/notes/python.md)\n- [Rust](42_Rust_priv.md)\n## CLI\n- [Bash](/notes/bash.md)\n- [Unix Commands](unix-commands.md)\n- [Git](/notes/git.md)\n- [curl](/notes/curl.md)\n- [jed](/notes/sed.md)\n- [jo](/notes/jo.md)\n- [jq](/notes/jq.md)\n- [jEnv](https://github.com/jenv/jenv)\n\t- [jEnv.be](https://www.jenv.be/)\n\t- To have your current jEnv version set in maven:\n\t```bash\n\tjenv enable-plugin maven\n\t```\n\n## Application Monitoring\n- [SigNoz](https://github.com/SigNoz/signoz) (Open-source alternative to DataDog and New Relic)\n## Infrastructure as Code\n- [Terraform](/notes/terraform.md)\n## CI/CD \n- [GitLab CI/CD](/notes/gitlab-ci-cd.md)\n## Build Tools \u0026 Containers\n- [Docker](/notes/Docker.md)\n- [Maven](/notes/maven.md)\n- [Nix](https://nixos.org/)\n\t- [ant-dateutils example](https://github.com/vlktomas/nix-examples/tree/master/desktop/Java/ant-dateutils)\n## Documentation\n- [Markdown](/notes/markdown.md)\n- [OpenAPI](/notes/openapi.md)\n### Architecture Diagrams\n- [PlantUML](https://plantuml.com/) (Architecture Diagrams as Code)\n- [Draw.io](https://app.diagrams.net/) (Traditional Architecture Diagrams)\n## Shortcuts\n- [Vim](/notes/vim.md)\n- [VS Code](/notes/vs-code.md)\n- [Intellij Shortcuts](intellij-shortcuts.md)\n## Cloud\n- [GCP Wiki](/notes/gcp-wiki.md)\n## Misc.\n- [Regex Generator](https://regex-generator.olafneumann.org/)\n- [SourceGraph Code Search](https://sourcegraph.com/search)\n- [Awesome Git Repositories](/notes/awesome-git-repositories.md)\n- [Tech Articles](/notes/tech-articles.md)\n- [Bitly.com](https://bitly.com/)","lastmodified":"2022-11-05T07:29:40.632565376Z","tags":null},"/notes/spring-boot":{"title":"Spring Boot","content":"\n- [Links to each Spring project](https://spring.io/projects)\n\n## Spring Data JPA\n- [JPQL Docs - Apache](https://openjpa.apache.org/builds/1.0.1/apache-openjpa-1.0.1/docs/manual/jpa_overview_query.html)\n- [Spring Data JPA Official Docs](https://docs.spring.io/spring-data/jpa/docs/current/reference/html/)\n- Sorting With Spring Data\n\t- [Baeldung: Sorting Query Results with Spring Data](https://www.baeldung.com/spring-data-sorting)\n\t- [Baeldung: Pagination and Sorting](https://www.baeldung.com/spring-data-jpa-pagination-sorting)\n\t- [Dynamic sorting with the Spring Data Sort object](https://attacomsian.com/blog/spring-data-jpa-sorting): A replacement for the `ORDER BY` clause used in classic SQL\n- Implementation Guides and Tutorials\n\t- [Baeldung: @Query](https://www.baeldung.com/spring-data-jpa-query)\n\t- [Medium: Pagination example queries in JPQL](https://medium.com/@sindepal/spring-data-jpa-query-and-pageable-15f8c3e7fe4e)\n\t- [Baeldung: Transaction Management](https://www.baeldung.com/transaction-configuration-with-jpa-and-spring)\n\t- [Wildcard Queries](https://www.amitph.com/spring-data-jpa-wildcard-query/)\n\t- [Baeldung: Setting up MetaModel](https://www.baeldung.com/hibernate-criteria-queries-metamodel)\n\t- [JPA Specifications - Interactive Tutorial](https://www.logicbig.com/tutorials/spring-framework/spring-data/combined-specifications.html)\n\t- [JPA Specifications - Interactive Tutorial](https://www.logicbig.com/tutorials/spring-framework/spring-data/combined-specifications.html)\n\t- [Hibernate docs - JPA MetaModel](https://docs.jboss.org/hibernate/jpamodelgen/1.0/reference/en-US/html_single/#whatisit)\n- Helpful Stack Overflow Posts\n\t- [Difference Between Criteria, Predicate and Specification](https://stackoverflow.com/questions/47469861/what-is-the-difference-between-a-criteria-a-predicate-and-a-specification)\n\t- [Criteria API vs QueryDSL vs JPA MetaModel](https://stackoverflow.com/questions/53325506/criteria-api-vs-querydsl-vs-jpa-metamodel)\n\t- [JPA Specifications](https://stackoverflow.com/questions/48647847/jpa-specifications-by-example)\n\n\n## Spring Boot Actuator Management Endpoints\n- [Spring Boot Actuator Endpoints Documentation](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#actuator.endpoints)\n- [A useful tutorial for Spring Boot Actuator](https://howtodoinjava.com/spring-boot/actuator-endpoints-example/)\n\n## jEnv\n- [For easily managing Java versions across projects](https://www.jenv.be/)\n\n## Custom Banner in Spring Boot\nIn short, just create a `/src/main/resources/banner.txt` and/or `/src/main/resources/banner.gif`  \n- [Spring Banner Tutorial](https://springhow.com/spring-boot-startup-banner/)\n- You can even have different banners per environment, by adding the following to your application-\\*.yml\n\t- Having custom banners per env makes it easy to know what you are running.\n```yml\nspring:\n  banner:\n    location: banner-crt.txt\n```","lastmodified":"2022-11-05T07:29:40.632565376Z","tags":null},"/notes/stuffed-bell-peppers":{"title":"Stuffed Bell Peppers","content":"\nStuffed bell peppers with ground beef and rice and bake. Sprinkle cheese on top.","lastmodified":"2022-11-05T07:29:40.632565376Z","tags":null},"/notes/tech-articles":{"title":"Tech Articles","content":"\n- https://scrapeops.io/blog/the-state-of-web-scraping-2022/\n- https://freenetproject.org/\n- https://arxiv.org/abs/2201.00223\n- https://www.youtube.com/watch?v=cOWjwwKSR78\n- [Raspberry PI E-Ink Dashboard](https://lengrand.fr/complete-setup-epaper/)","lastmodified":"2022-11-05T07:29:40.632565376Z","tags":null},"/notes/terraform":{"title":"Terraform Wiki","content":"## Terraform Resources\n- [Resource Dependencies](https://www.terraform.io/language/resources/behavior#resource-dependencies)\n- [Terraform Workspaces](https://www.terraform.io/language/state/workspaces#workspaces)\n\u003e ### When to use Multiple Workspaces\n\u003e Named workspaces allow conveniently switching between multiple instances of a _single_ configuration within its _single_ backend. They are convenient in a number of situations, but cannot solve all problems.\n\u003e A common use for multiple workspaces is to create a parallel, distinct copy of a set of infrastructure in order to test a set of changes before modifying the main production infrastructure. For example, a developer working on a complex set of infrastructure changes might create a new temporary workspace in order to freely experiment with changes without affecting the default workspace.\n## Automation\n- [Automating Terraform](https://learn.hashicorp.com/tutorials/terraform/automate-terraform)\n\u003e ### Pass `terraform plan` output to `terraform apply` in CI\n\u003e When running in an orchestration tool, it can be difficult or impossible to ensure that the `plan` and `apply` subcommands are run on the same machine, in the same directory, with all of the same files present.\n## Terraform Commands\n- `terraform refresh` is effectively an alias for `terraform apply -refresh-only -auto-approve` which is why it should _NEVER_ be used. It is far too risky to run `terraform refresh` without first reviewing the proposed state changes.\n- Instead, use `terraform apply -refresh-only`. This alternative command will present an interactive prompt for you to review and confirm the proposed state changes. After confirming, your Terraform remote state will be updated to match the settings of your managed remote objects. More info can be found about this in the Hashicorp documentation [here](https://www.terraform.io/cli/commands/refresh#command-refresh).\n- `terraform init`\n\t- The `terraform init` command is used to initialize a working directory containing Terraform configuration files. This is the first command that should be run after writing a new Terraform configuration or cloning an existing one from version control. It is safe to run this command multiple times.\n- Terraform prints output values to the screen when a configuration is applied, but Terraform can also query all output values with the `terraform output` command, or selectively query certain output values using the below command template:\n```\nterraform output $RESOURCE_NAME\n```\n## Terraform Tips and Tricks\n- You can use `-target` to plan/apply a [specific Terraform resource](https://devops.stackexchange.com/questions/4292/terraform-apply-only-one-tf-file) within a module. **Be careful**, this is an advanced way to use Terraform and could break your infrastructure if done improperly.\n```\nterraform apply -target=aws_security_group.my_sg\n```\n- Turn on Verbose Logging by setting the TF_LOG environment variable to 1. 0 turns off logging.\n```\nexport TF_LOG=1\n```\n- `tfenv` is a useful cli tool that can be used to easily switch between different versions of Terraform.\n```\nbrew install tfenv\ntfenv install 1.0.0\ntfenv use 1.0.0\nterraform version # verify you're using the right version\n```\n\n- If you place a `.terraform-version` hidden file at the root of your terraform directory, `tfenv install` (no argument) will install the version written in it.","lastmodified":"2022-11-05T07:29:40.632565376Z","tags":null},"/notes/tor":{"title":"Tor","content":"\nThe core principle of Tor, [Onion routing](https://en.wikipedia.org/wiki/Onion_routing \"Onion routing\"), was developed in the mid-1990s by United States Naval Research Laboratory employees, mathematician Paul Syverson, and computer scientists Michael G. Reed and David Goldschlag, to protect U.S. communications online. Onion routing is implemented by encryption in the application layer of the communication protocol stack, nested like the layers of an onion. The alpha version of Tor, developed by Syverson and computer scientists Roger Dingledine and Nick Mathewson and then called The Onion Routing project (which later simply became \"Tor\", as an acronym for the former name, was launched on 20 September 2002. The first public release occurred a year later.\n\nIn 2004, the Naval Research Laboratory released the code for Tor under a free license, and the Electronic Frontier Foundation (EFF) began funding Dingledine and Mathewson to continue its development. In 2006, Dingledine, Mathewson, and five others founded The Tor Project, a Massachusetts-based 501(c)(3) research-education nonprofit organization responsible for maintaining Tor. The EFF acted as The Tor Project's fiscal sponsor in its early years, and early financial supporters of The Tor Project included the U.S. Bureau of Democracy, Human Rights, and Labor and International Broadcasting Bureau, Human Rights Watch, the University of Cambridge, and Google.\n\nOver the course of its existence, various Tor [attacks and weaknesses](https://en.wikipedia.org/wiki/Tor_(network)#Weaknesses) have been discovered and occasionally used. Attacks against Tor are an active area of academic research.","lastmodified":"2022-11-05T07:29:40.632565376Z","tags":null},"/notes/unix-commands":{"title":"Unix Commands ","content":"\n## Cheat Sheets\n- [Stanford's Basic Unix Commands](http://mally.stanford.edu/~sr/computing/basic-unix.html)\n\n## Users / Groups\nTo get the current user in a shell or script, run the below command\n```bash\nwhoami\n```\nor\n```bash\necho \"$USER\"\n```\n## SSH\n- Template command to remotely run a script and immediately exit, without caring about the result. This is useful for automation scripts that involve running multiple commands on remote servers.\n```\nssh -q $SSH_USER@$SERVER \"nohup /appl/bin/start.sh start \u003e /dev/null 2\u003e\u00261 \u0026 \"\n```\n\n## Verify DNS Resolution\n```shell\nnslookup www.google.com\n```\n\n## IP Address\n### Public IP Address of local machine \n```shell\ncurl ifconfig.me\n```\n\n### Private IP Address of local machine\n```shell\nifconfig -a\n```\n\n## Grand total size of all the subdirectories in the current directory\n- `du -sh -- *`\n\n## Process ID Number\n`lsof -p PID` will list all the files that have been touched by the currently running process\n\n## egrep\n- Search contents of every file for this matching text:\n`find . -type f -exec egrep -lH search_for_me '{}' ';'`\n\n## find command\n- Find every file named config.txt in your home directory:\n`find ~ -name \"config.txt\"`\n\n## scp file transfer commands\n- [scp command cheat sheet](https://linuxize.com/post/how-to-use-scp-command-to-securely-transfer-files/)\n* Copy a file from a local to a remote system:\n`scp file.txt ssh_user@hostname:/tmp`\n\n## list/installation/deletion of certs with keytool\n- List all certs in a keystore: `keytool -list -keystore \u003cPATH_TO_CACERTS\u003e -storepass changeit -noprompt`\n- Add a cert to a keystore: `keytool -import -trustcacerts -keystore \u003cPATH_TO_CACERTS\u003e -storepass changeit -noprompt -alias \u003cALIAS\u003e -file \u003cPATH_TO_NEW_CERT\u003e`\n- Delete cert in a keystore by alias: `keytool -delete -alias \u003cALIAS\u003e -keystore \u003cPATH_TO_CACERTS\u003e`\n\n## OpenSSL commands\n- Verify contents of a cert: `openssl x509 -in \u003cPATH_TO_CERT\u003e -text`\n- View certs of a client: `openssl s_client -showcerts -connect google.com:636`\n\n## Change Ownership of Symlink\n- `chown -h USER:GROUP jre` if you want to change the ownership of the symlink itself, not the destination directory\n \n## What's using this port?\n- Handy command for Mac to check what process is using a port \n```\nsudo lsof -i :3306\n```\n- If you're on Mac You can also look up and stop processes via the Activity Monitor GUI.\n\t- If you wanted to stop a `java` process, for example, you could go to the `Disk` section, and filter by `java` processes.\n","lastmodified":"2022-11-05T07:29:40.632565376Z","tags":null},"/notes/vim":{"title":"Vim","content":"\n## Why Vim?\nLearning to use Vim is worth it for several reasons. First, Vim (or vi) is almost guaranteed to be installed on any remote server you may need to ssh into. Second, although Vim was released in 1991, it’s widely available as a plugin on modern IDEs, like Intellij, VS Code, Eclipse, etc. Third, once you’re comfortable with the controls, Vim allows you to quickly navigate to any place on the page with precision. Combining that with the ability to record chains of commands and replay them, it allows for programmatic editing of files on the fly. Once you’re comfortable with Vim, you have a text editor at your service that you can on virtually any server.\n\n## Vim Commands\n- [Vim Cheat Sheet](https://vim.rtorr.com/)\n\n### Sort Commands\nThe following command sorts all lines and removes duplicate lines:\n```\n:sort u\n```\n\nhttps://stackoverflow.com/questions/26981192/how-do-i-remove-non-duplicate-lines-in-vim\n\n### Search Commands\nSearch for lines containing this pattern `- **`: `?` + `- \\*\\*`\n\nFind and Replace: `%s/foo/bar/g`\n\nThe traditional approach to find lines not matching a pattern is using the :v command:\n  - `:v/Warning/p`\n  - `:v/Warning/d` (NOTE: this deletes every line that does NOT match this pattern)\n\n### Navigation Commands\n- `)` or `shift + 0` to drop to the next newline\n- `u` is undo and `ctrl + r` to redo\n\n### Record Macro Commands\n- Press `q` then any letter to start recording in a register (ex: `qq`)\n- Perform command(s)\n- Press `q` to stop recording\n- Press `N@q` to run the macro stored in the q register N times\n\n### Window Panes in Vim\n- Add this to the .vimrc in your home user's directory to use the mouse in vim: `set mouse=a`\n- Use `:Vex` to open a filesystem navigation window in vim\n- Use `:ter` or `:vert ter` to open up a shell window\n- The mouse access allows you to resize windows and click through a filesystem menu\n\n### Regex for Number Searches\nRegex syntax is a little crazy in Vim, but being able to record macros that search for certain patterns is very useful for extracting data.\n\nSearch numbers of fixed length say 5 (matches `12345`, `123456`). Numbers more than 5 digits contain substring of 5 digits, and are also found by this regex.\n```\n/\\d\\{5\\}\n```\n\nword boundary start:\n```\n\\\u003c\n```\n\nword boundary end:\n```\n\\\u003e\n```\n\nThen use below to search numbers of exact 5 digits (match 12345 but not 123456):\n```\n/\\\u003c\\d\\{5\\}\\\u003e\n```\n\nUse below to search numbers of 5 or more digits:\n```\n/\\\u003c\\d\\{5,\\}\\\u003e\n```\n\nUse below to search numbers of 5 to 8 digits:\n```\n/\\\u003c\\d\\{5,8\\}\\\u003e\n```\n\nUse below to search numbers of 8 or less digits:\n```\n/\\\u003c\\d\\{,8\\}\\\u003e\n```\n\nShortcut numbers of 1 or more digits\n\n```\n/\\d\\+\n```\n\n## .vimrc file\n```\nset nu\nset relativenumber\nset scrolloff=8\nset mouse=a\nset ttymouse=sgr\nset clipboard=unnamed\n```","lastmodified":"2022-11-05T07:29:40.632565376Z","tags":null},"/notes/vs-code":{"title":"VS Code","content":"\nSearch for files: `Cmd ⌘+p`","lastmodified":"2022-11-05T07:29:40.632565376Z","tags":null}}